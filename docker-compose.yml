version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: re_scraper_postgres
    environment:
      POSTGRES_DB: real_estate_scraper
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Celery task queue
  redis:
    image: redis:7-alpine
    container_name: re_scraper_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main API Application
  api:
    build: .
    container_name: re_scraper_api
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: password
      DB_DATABASE: real_estate_scraper
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      
      # API
      API_HOST: 0.0.0.0
      API_PORT: 8000
      API_DEBUG: "false"
      SECRET_KEY: "your-secret-key-change-this-in-production"
      
      # Scraping
      REQUESTS_PER_MINUTE: 30
      DELAY_BETWEEN_REQUESTS: 2.0
      USE_PROXY: "false"
      HEADLESS_BROWSER: "true"
      
      # Logging
      LOG_LEVEL: INFO
      ENVIRONMENT: production
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for background tasks
  worker:
    build: .
    container_name: re_scraper_worker
    command: celery -A src.tasks.celery worker --loglevel=info
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: password
      DB_DATABASE: real_estate_scraper
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      
      # Scraping
      REQUESTS_PER_MINUTE: 30
      DELAY_BETWEEN_REQUESTS: 2.0
      USE_PROXY: "false"
      HEADLESS_BROWSER: "true"
      
      # Logging
      LOG_LEVEL: INFO
      ENVIRONMENT: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Celery Beat for scheduled tasks
  scheduler:
    build: .
    container_name: re_scraper_scheduler
    command: celery -A src.tasks.celery beat --loglevel=info
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: password
      DB_DATABASE: real_estate_scraper
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      
      # Logging
      LOG_LEVEL: INFO
      ENVIRONMENT: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: re_scraper_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: re_scraper_network

